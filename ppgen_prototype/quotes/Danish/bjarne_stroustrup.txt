Danish,Scientist
However, when Java is promoted as the sole programming language, its flaws and limitations become serious.
The standard library saves programmers from having to reinvent the wheel.
This evolution may compromise Java's claim of being simpler than C++, but my guess is that the effort will make Java a better language than it is today.
Certainly not every good program is object-oriented, and not every object-oriented program is good.
People who passionately want to believe that the world is basically simple react to this with a fury that goes beyond what I consider appropriate for discussing a programming language.
Thus, the standard library will serve as both a tool and as a teacher.
I find languages that support just one programming paradigm constraining.
After all, C++ isn't a perfect match for Java's design aims either.
First, I'd like to see the basic tools such as compilers, debuggers, profilers, database interfaces, GUI builders, CAD tools, and so forth fully support the ISO standard.
It is easy to study the rules of overloading and of templates without noticing that together they are one of the keys to elegant and efficient type-safe containers.
Defining OO as based on the use of class hierarchies and virtual functions is also practical in that it provides some guidance as to where OO is likely to be successful.
Clearly, I reject the view that there is one way that is right for everyone and for every problem.
My list of basic tools is a partial answer to the question about what has changed: Over the past few years, large numbers of programmers have come to depend on elaborate tools to interface code with systems facilities.
I would encourage nonproprietary standards for tools and libraries.
With the increasing importance of standards for system-level objects such as COM and CORBA, it is particularly important that the C++ bindings to those be clean, well documented, and simple to use.
Personally, I look forward to better tools for analyzing C++ source code.
